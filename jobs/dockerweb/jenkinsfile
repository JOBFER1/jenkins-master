
pipeline {
  agent any
 parameters {
        string(name: 'name_container', defaultValue: 'proyecto-qa', description: 'nombre del docker')
        string(name: 'name_imagen', defaultValue: 'iproyecto-qa', description: 'nombre de la imagen')
        string(name: 'tag_imagen', defaultValue: 'latest', description: 'etiqueta de la imagen')
        string(name: 'puerto_imagen', defaultValue: '81', description: 'puerto a publicar')
    }
    environment {
        name_final = "${name_container}${tag_imagen}${puerto_imagen}"        
    }
    stages {
		stage('stop/rm') {
			when {
                expression { 
                    //DOCKER_EXIST = sh(returnStdout: true, script: 'echo "$(docker ps -q --filter name=${name_final})"').trim()
                    DOCKER_EXIST = bat(returnStdout: true, script: 'echo "$(docker ps -q --filter name=${name_final})"').trim()
                    bat('echo %DOCKER_EXIST%')
                    return  DOCKER_EXIST != ''
                    
                    //TODO: Esta condicion no funciona bien. Siempre intenta parar y borrar el contenedor
                    //y da error cuando no lo encuentra
                    //En ese caso (cuando no lo encuentra) no deberia intentar pararlo y borrarlo 
                }
            }
            steps {
                script{
                    //sh ''' 
                    bat '''
                         :: docker stop ${name_final}
                         docker stop %name_final%
                         docker rm %name_final%
                    '''
                    }
                }                    
            }
           
        stage('build') {
            steps {
                script{
                    bat ''' 
                    ::docker build jobs/dockerweb/ -t ${name_imagen}:${tag_imagen} 
                    docker build jobs/dockerweb/ -t %name_imagen%:%tag_imagen%
                    :: docker build jobs/dockerweb/ -t imagen-borrame 
                    '''
                    }
                    
                }                    
                                  
            }
            stage('run') {
            steps {
                script{
                    bat ''' 
                        ::docker run -dp ${puerto_imagen}:80 --name ${name_final} ${name_imagen}:${tag_imagen}
                        docker run -dp %puerto_imagen%:80 --name %name_final% %name_imagen%:%tag_imagen%
                        :: docker run -dp %puerto_imagen%:80 --name imagen-borrame-1 imagen-borrame
 
                    '''
                    }
                }                    
            }
        }   
    }  